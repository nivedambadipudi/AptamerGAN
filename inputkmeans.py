# -*- coding: utf-8 -*-
"""inputKmeans.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1phWiLkEHG_ZcTlswugXnvA4MNTPayStv
"""

import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

dna_alphabet = ['A', 'T', 'C', 'G']

def load_sequences_from_file(file_path):
    with open(file_path, 'r') as file:
        dna_sequences = file.readlines()

    dna_sequences = [seq.strip() for seq in dna_sequences]
    return dna_sequences

def sequences_to_strings(sequences, alphabet):
    seq_strings = [''.join([alphabet[dna_alphabet.index(nucleotide)] for nucleotide in seq]) for seq in sequences]
    return seq_strings

file_paths = ["theo06.txt", "theo10.txt", "theo12.txt",
              "theo15.txt", "theo16.txt", "theo18.txt",
              "theo20.txt", "theo22.txt"]

for file_path in file_paths:
  dna_sequences = load_sequences_from_file(file_path)

  seq_strings = sequences_to_strings(dna_sequences, dna_alphabet)

  vectorizer = CountVectorizer(analyzer='char')
  X = vectorizer.fit_transform(seq_strings)

  best_score = -1
  best_k = 2
  for k in range(2, 31):
      kmeans = KMeans(n_clusters=k, random_state=0)
      cluster_labels = kmeans.fit_predict(X)
      silhouette_avg = silhouette_score(X, cluster_labels)
      print(f"Number of clusters: {k}, Silhouette Score: {silhouette_avg}")
      if silhouette_avg > best_score:
          best_score = silhouette_avg
          best_k = k

  print(f"Best number of clusters: {best_k}")

  kmeans = KMeans(n_clusters=best_k, random_state=0)
  clusters = kmeans.fit_predict(X.toarray())

  data = {'Sequence': seq_strings, 'Cluster': clusters}
  df = pd.DataFrame(data)

  csv_file = 'Kmeans_input_{}.csv'.format(file_path)
  df.to_csv(csv_file, index=False)

  print(f"Clusters saved to {csv_file}")